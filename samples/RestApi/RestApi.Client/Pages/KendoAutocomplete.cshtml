@page "/auto-complete"
@using RestApi.Shared
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using System.Linq
@inject HttpClient Http

<h1>Autocomplete Demo</h1>

<input id="customers" style="width: 300px" />
<script>
    Blazor.registerFunction('fillAutocomplete', (customers) => {
        // Fill Kendo Autocomplete
        $("#customers").kendoAutoComplete({
            dataSource: customers,
            select: (e) => {
                // Call C# when user selects an item in Kendo's Autocomplete
                const assemblyName = 'RestApi.Client';
                const namespace = 'RestApi.Client.Pages';
                const typeName = 'KendoAutocomplete';
                const methodName = 'SelectCustomer';

                const selectCustomerMethod = Blazor.platform.findMethod(
                    assemblyName,
                    namespace,
                    typeName,
                    methodName
                );

                let result = Blazor.platform.callMethod(selectCustomerMethod, null, [Blazor.platform.toDotNetString(e.dataItem)]);
            },
            filter: "startswith",
            placeholder: "Select customer...",
            separator: ", "
        });

        return true;
    });
</script>

@functions {
    protected override async Task OnInitAsync()
    {
        await RefreshCustomerList();
    }

    private async Task RefreshCustomerList()
    {
        // Call a web api to get some data
        var customers = await Http.GetJsonAsync<List<Customer>>("/api/Customer");

        // Here you can execute any C# business logic. For demo purposes, we 
        // project the result into a list of strings.
        var projectedCustomers = customers
            .Select(c => $"{c.LastName}, {c.FirstName}")
            .ToList();

        RegisteredFunction.Invoke<bool>("fillAutocomplete", projectedCustomers);
    }

    public static void SelectCustomer(string customerName)
    {
        Console.WriteLine($"Select customer '{customerName}'");
    }
}
